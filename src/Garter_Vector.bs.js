// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function make(param) {
  return {
          size: 0,
          depth: 1,
          root: {
            TAG: /* Leaf */1,
            _0: new Array(2)
          }
        };
}

function getPath(i, d) {
  console.log(i, d);
  if (d === 0) {
    return {
            hd: i,
            tl: /* [] */0
          };
  }
  var denom = Math.pow(2, d);
  console.log("denom: " + String(denom));
  return Belt_List.add(getPath(Caml_int32.mod_(i, denom), d - 1 | 0), Caml_int32.div(i, denom));
}

function getUnsafe(param, i) {
  var path = getPath(i, param.depth - 1 | 0);
  var _path = path;
  var _node = param.root;
  while(true) {
    var node = _node;
    var path$1 = _path;
    var index = Belt_List.headExn(path$1);
    if (node.TAG) {
      return node._0[index];
    }
    _node = node._0[index];
    _path = Belt_List.tailExn(path$1);
    continue ;
  };
}

function get(v, i) {
  if (i < 0 || i >= v.size) {
    return ;
  } else {
    return Caml_option.some(getUnsafe(v, i));
  }
}

function setUnsafe(vec, i, x) {
  var path = getPath(i, vec.depth - 1 | 0);
  var traverse = function (path, node) {
    var index = Belt_List.headExn(path);
    if (node.TAG) {
      var m = node._0.slice(0);
      Belt_Array.set(m, index, x);
      return {
              TAG: /* Leaf */1,
              _0: m
            };
    }
    var n = node._0;
    var m$1 = n.slice(0);
    Belt_Array.set(m$1, index, traverse(Belt_List.tailExn(path), n[index]));
    return {
            TAG: /* Inner */0,
            _0: m$1
          };
  };
  return {
          size: vec.size,
          depth: vec.depth,
          root: traverse(path, vec.root)
        };
}

function push(vec, x) {
  return vec;
}

function pop(vec) {
  return vec;
}

var numBranches = 2;

exports.numBranches = numBranches;
exports.make = make;
exports.getPath = getPath;
exports.getUnsafe = getUnsafe;
exports.get = get;
exports.setUnsafe = setUnsafe;
exports.push = push;
exports.pop = pop;
/* No side effect */
